import re
import os
import warnings


if __name__ == '__main__':
    folder = '../xharpy/f0j_sources/'
    output = 'source/library/library_f0j.rst'
    source_files = sorted([file for file in os.listdir(folder) if file.endswith('_source.py')])

    pattern1 = re.compile(r'calc\_f0j\(.+?return', flags=re.DOTALL)
    pattern2 = re.compile(r'"""(.*?)"""', flags=re.DOTALL)
    pattern3 = re.compile('\n(\s+)----')
    strings = [
        'Options for f0j_calculations',
        '============================',
        'This section is an autogenerated list of the computation_dicts of all currently available',
        'f0j_sources.'
    ]


    for source_file in source_files:

        with open(os.path.join(folder, source_file), 'r') as fo:
            content = fo.read()
        
        try:
            f0j_function = re.search(pattern1, content).group(0)
            docstring = re.search(pattern2, f0j_function).group(1)
            indent0 =  re.search(pattern3, docstring).group(1)
            
            pattern4 = re.compile(r'(computation_dict\s*:.*?)\n' + indent0 + r'[^\s]', flags=re.DOTALL)
            comp_dict = re.search(pattern4, docstring).group(1)
            comp_dict_split = comp_dict.split('\n')

            strings += [
                '',
                '',
                source_file[:-10],
                '-' * (len(source_file) - 10),
                '',
                'This is the computation dict docstring (automatically copied from .py files)',
                '',
                comp_dict_split[0],
                ''
            ]
            n_spaces = 0
            index = 0
            while comp_dict_split[1][n_spaces] == ' ':
                n_spaces += 1

            for string in comp_dict_split[1:]:
                if len(string) < n_spaces:
                    strings.append(string)
                else:
                    strings.append(string[n_spaces:])
        except:
            warnings.warn('Could not read the docstring in file: ' + source_file)

    with open(output, 'w') as fo:
        fo.write('\n'.join(strings + ['','','']))
